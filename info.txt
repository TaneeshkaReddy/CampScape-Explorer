8/7/24 PASSPORT
npm passport , passport-local , passport-local-mongoose

then, we are make a mongoose user model with email field only, and use passport plugin on that which automatically adds username and hashed password field.

app.user(passport.initialize());
app.use(passport.session());

passport.use(new LocalStrategy(User.authenticate()));
// this line tells us hi passport, use localStrategy that was required and for that local strategy use and in-built method for authentication called User.authenticate()


passport.serializeUser(User.serializeUser()); 
passport.deserializeUser(User.deserializeUser());

app.get('/fakeUser',async (req,res)=>{
  const user=new User({email:'tan@gmail.com',username:'tannn'})
  const newUser=await User.register(user,'mypassword')
  res.send(newUser);
})
// so when we do this, a user is created with email-tan@gmail.com,username-tannn and hashed password and salt value
we are setting function of isLoggedIn to many things like creating a new campground, to edit etc,
isLoggedIn - checks if a user is logged in ,then only lets others do the above activities

after this , one problem was that , after a user registers, he is still not logged in and that is not a good thing, so we are using a passport method to 
log in a user after registration called res.login()

we are making a middleware.js route to serialise and deserialize the session details
then one 

then we see how to redirect users back to the page they were visiting before being sent to the login page, once they've successfully logged in





9/7/2024:
adding authorization
so initially we add an author field to campground model that references to user model
and added seeds/index.js to keep taneeshka as author of default created camps
then when we create a new campground on post route, the userid is put as the author
then we just edited show page so that the author is visible


then we made changes :<% if(currentUser && camp.author.equals(currentUser._id)){ %>
o show.ejs so that only the author is able to view the edit and delete option

but now anyone can send a post/patch request through postman so we added permissions
by tweaking a few things in campgrounds.js ka:
1. router.get('/:id/edit' 
2.router.put('/:id'
3. router.delete('/:id'

now as it repeating in many, lets just create another middleware called verifyAuthor
then we finally move all the middlwares to middleware.js file


next move on to reviews
only people who are logged in can review
and when they leave a review, it should be associated with that particular person
then display the name of the reviewer too
then only people who left the review can delete it